{
  "name": "stack",
  "type": "registry:component",
  "dependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "'use client'\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\nimport { useState } from \"react\";\n\ninterface CardRotateProps {\n  children: React.ReactNode;\n  onSendToBack: () => void;\n  sensitivity: number;\n}\n\nfunction CardRotate({ children, onSendToBack, sensitivity }: CardRotateProps) {\n  const x = useMotionValue(0);\n  const y = useMotionValue(0);\n  const rotateX = useTransform(y, [-100, 100], [60, -60]);\n  const rotateY = useTransform(x, [-100, 100], [-60, 60]);\n\n  function handleDragEnd(_: never, info: { offset: { x: number; y: number } }) {\n    if (\n      Math.abs(info.offset.x) > sensitivity ||\n      Math.abs(info.offset.y) > sensitivity\n    ) {\n      onSendToBack();\n    } else {\n      x.set(0);\n      y.set(0);\n    }\n  }\n\n  return (\n    <motion.div\n      className=\"absolute cursor-grab\"\n      style={{ x, y, rotateX, rotateY }}\n      drag\n      dragConstraints={{ top: 0, right: 0, bottom: 0, left: 0 }}\n      dragElastic={0.6}\n      whileTap={{ cursor: \"grabbing\" }}\n      onDragEnd={handleDragEnd}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\ninterface StackProps {\n  randomRotation?: boolean;\n  sensitivity?: number;\n  cardDimensions?: { width: number; height: number };\n  sendToBackOnClick?: boolean;\n  cardsData?: { id: number; img: string }[];\n  animationConfig?: { stiffness: number; damping: number };\n}\n\nexport default function Stack({\n  randomRotation = false,\n  sensitivity = 200,\n  cardDimensions = { width: 208, height: 208 },\n  cardsData = [],\n  animationConfig = { stiffness: 260, damping: 20 },\n  sendToBackOnClick = false\n}: StackProps) {\n  const [cards, setCards] = useState(\n    cardsData.length\n      ? cardsData\n      : [\n        { id: 1, img: \"https://images.unsplash.com/photo-1480074568708-e7b720bb3f09?q=80&w=500&auto=format\" },\n        { id: 2, img: \"https://images.unsplash.com/photo-1449844908441-8829872d2607?q=80&w=500&auto=format\" },\n        { id: 3, img: \"https://images.unsplash.com/photo-1452626212852-811d58933cae?q=80&w=500&auto=format\" },\n        { id: 4, img: \"https://images.unsplash.com/photo-1572120360610-d971b9d7767c?q=80&w=500&auto=format\" }\n      ]\n  );\n\n  const sendToBack = (id: number) => {\n    setCards((prev) => {\n      const newCards = [...prev];\n      const index = newCards.findIndex((card) => card.id === id);\n      const [card] = newCards.splice(index, 1);\n      newCards.unshift(card);\n      return newCards;\n    });\n  };\n\n  return (\n    <div\n      className=\"relative\"\n      style={{\n        width: cardDimensions.width,\n        height: cardDimensions.height,\n        perspective: 600,\n      }}\n    >\n      {cards.map((card, index) => {\n        const randomRotate = randomRotation\n          ? Math.random() * 10 - 5\n          : 0;\n\n        return (\n          <CardRotate\n            key={card.id}\n            onSendToBack={() => sendToBack(card.id)}\n            sensitivity={sensitivity}\n          >\n            <motion.div\n              className=\"rounded-2xl overflow-hidden border-4 border-white\"\n              onClick={() => sendToBackOnClick && sendToBack(card.id)}\n              animate={{\n                rotateZ: (cards.length - index - 1) * 4 + randomRotate,\n                scale: 1 + index * 0.06 - cards.length * 0.06,\n                transformOrigin: \"90% 90%\",\n              }}\n              initial={false}\n              transition={{\n                type: \"spring\",\n                stiffness: animationConfig.stiffness,\n                damping: animationConfig.damping,\n              }}\n              style={{\n                width: cardDimensions.width,\n                height: cardDimensions.height,\n              }}\n            >\n              <img\n                src={card.img}\n                alt={`card-${card.id}`}\n                className=\"w-full h-full object-cover pointer-events-none\"\n              />\n            </motion.div>\n          </CardRotate>\n        );\n      })}\n    </div>\n  );\n}",
      "path": "/components/codesnippetui/stack.tsx",
      "target": "/components/codesnippetui/stack.tsx"
    }
  ]
}
